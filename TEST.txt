import socket
import tkinter as tk
from tkinter import scrolledtext, messagebox
import time

# Ahora evaluamos RDP, que utiliza el puerto 3389
PUERTO_RDP = 3389
REPETICIONES = 5

def verificar_puerto(ip, puerto=PUERTO_RDP, timeout=2, repeticiones=REPETICIONES):
    tiempos = []
    for _ in range(repeticiones):
        try:
            inicio = time.time()
            with socket.create_connection((ip.strip(), puerto), timeout=timeout):
                fin = time.time()
                tiempos.append((fin - inicio) * 1000)
        except:
            continue
    if tiempos:
        return round(sum(tiempos) / len(tiempos), 2)
    return None

def ejecutar_prueba():
    resultados_text.delete(1.0, tk.END)
    datos = entrada_text.get(1.0, tk.END).strip()

    if not datos:
        messagebox.showwarning("Advertencia", "Por favor ingresa las IPs y nombres.")
        return

    lineas = datos.splitlines()
    resultados_finales = []

    for linea in lineas:
        if not linea.strip():
            continue
        if '\t' not in linea:
            resultados_text.insert(tk.END, f"L√≠nea inv√°lida (falta tabulaci√≥n): {linea}\n")
            continue

        ips_str, nombre = linea.strip().split('\t')
        ips = [ip.strip() for ip in ips_str.split(',')]

        resultados_ip = []

        for ip in ips:
            tiempo_prom = verificar_puerto(ip)
            if tiempo_prom is not None:
                resultados_ip.append((ip, tiempo_prom))

        if resultados_ip:
            ip_rapida = min(resultados_ip, key=lambda x: x[1])
            resultados_finales.append((ip_rapida[0], nombre, ip_rapida[1]))

    if resultados_finales:
        for ip, nombre, tiempo in resultados_finales:
            resultados_text.insert(tk.END, f"{ip}\t{nombre}\t{tiempo} ms\n")
    else:
        resultados_text.insert(tk.END, "No se encontraron IPs que respondan por el puerto 3389 (RDP).")

def limpiar_campos():
    entrada_text.delete(1.0, tk.END)
    resultados_text.delete(1.0, tk.END)

def copiar_resultado():
    texto = resultados_text.get(1.0, tk.END).strip()
    if texto:
        ventana.clipboard_clear()
        ventana.clipboard_append(texto)
        ventana.update()
        messagebox.showinfo("Copiado", "Resultado copiado al portapapeles.")
    else:
        messagebox.showwarning("Aviso", "No hay resultados para copiar.")

# Crear la interfaz
ventana = tk.Tk()
ventana.title("Validador de RDP - IP m√°s r√°pida por equipo (Puerto 3389)")
ventana.geometry("850x600")

# Campo de entrada
tk.Label(ventana, text="üñ•Ô∏è IPs y Nombre (formato: ip1, ip2\tNombre):").pack(anchor='w', padx=10, pady=5)
entrada_text = scrolledtext.ScrolledText(ventana, height=12, width=110)
entrada_text.pack(padx=10, pady=5)

# Botones
boton_frame = tk.Frame(ventana)
boton_frame.pack(pady=10)

tk.Button(boton_frame, text="‚úÖ Ejecutar Prueba", command=ejecutar_prueba, width=20).pack(side=tk.LEFT, padx=10)
tk.Button(boton_frame, text="üßπ Limpiar Campos", command=limpiar_campos, width=20).pack(side=tk.LEFT, padx=10)
tk.Button(boton_frame, text="üìã Copiar Resultado", command=copiar_resultado, width=20).pack(side=tk.LEFT, padx=10)

# Resultados
tk.Label(ventana, text="üìã Resultados (IP m√°s r√°pida por equipo v√≠a RDP - puerto 3389):").pack(anchor='w', padx=10, pady=5)
resultados_text = scrolledtext.ScrolledText(ventana, height=15, width=110)
resultados_text.pack(padx=10, pady=5)

ventana.mainloop()